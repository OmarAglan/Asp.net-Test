@page
@model Roshta.Pages.Prescriptions.CreateModel
@using Roshta.ViewModels // Added for referencing PrescriptionItemCreateModel

@{
    ViewData["Title"] = "Create Prescription";
    // Helper function to safely get medication name
    Func<int, string> GetMedicationName = (id) =>
        Model.MedicationSelectList?.FirstOrDefault(m => m.Value == id.ToString())?.Text ?? $"ID: {id} (Not Found)";
}

<h1>@ViewData["Title"]</h1>

<hr />
<div class="row">
    <div class="col-md-8"> 
        <form method="post" id="prescriptionForm">
            @Html.AntiForgeryToken() 
            @* Display validation summary for model-level errors (like item count) *@
            <div asp-validation-summary="ModelOnly" class="text-danger mb-3"></div>

            <h4>Prescription Details</h4>
            <div class="row mb-3">
                <div class="col-md-6">
                    <label asp-for="PrescriptionCreate.PatientId" class="form-label"></label> @* Changed to form-label *@
                    <select asp-for="PrescriptionCreate.PatientId" class="form-select" asp-items="Model.PatientSelectList">
                        <option value="">-- Select Patient --</option>
                    </select>
                    <span asp-validation-for="PrescriptionCreate.PatientId" class="text-danger d-block"></span> @* Added d-block *@
                </div>
                <div class="col-md-6">
                    <label asp-for="PrescriptionCreate.ExpiryDate" class="form-label"></label> @* Changed to form-label *@
                    <input asp-for="PrescriptionCreate.ExpiryDate" class="form-control" />
                    <span asp-validation-for="PrescriptionCreate.ExpiryDate" class="text-danger d-block"></span> @* Added d-block *@
                </div>
            </div>
            <div class="row mb-3">
                 <div class="col-md-6">
                    <label asp-for="PrescriptionCreate.NextAppointmentDate" class="form-label"></label> @* Changed to form-label *@
                    <input asp-for="PrescriptionCreate.NextAppointmentDate" class="form-control" />
                    <span asp-validation-for="PrescriptionCreate.NextAppointmentDate" class="text-danger d-block"></span> @* Added d-block *@
                </div>
                 @* Placeholder for general form error message (e.g., if no items added) *@
                 <div class="col-md-6 align-self-end">
                    <span id="formSubmitError" class="text-danger"></span>
                 </div>
            </div>

            <hr />

            <h4>Medication Items</h4>

             <!-- Section for adding a new item -->
            <div class="card mb-3" id="addItemSection">
                 <div class="card-header">Add Medication</div>
                 <div class="card-body">
                     <div class="row g-3">
                         <div class="col-md-12">
                             <label for="selectMedication" class="form-label">Medication</label>
                             <select id="selectMedication" class="form-select" asp-items="Model.MedicationSelectList"> 
                                 <option value="">-- Select Medication --</option>
                             </select>
                         </div>
                          <div class="col-md-4">
                             <label for="inputDosage" class="form-label">Dosage</label>
                             <input type="text" id="inputDosage" class="form-control" placeholder="e.g., 500mg, 10ml" />
                             <span id="inputDosageValidation" class="text-danger d-block"></span>
                         </div>
                          <div class="col-md-4">
                             <label for="inputFrequency" class="form-label">Frequency</label>
                             <input type="text" id="inputFrequency" class="form-control" placeholder="e.g., Twice daily" />
                             <span id="inputFrequencyValidation" class="text-danger d-block"></span>
                         </div>
                         <div class="col-md-4">
                             <label for="inputDuration" class="form-label">Duration</label>
                             <input type="text" id="inputDuration" class="form-control" placeholder="e.g., 10 days" />
                             <span id="inputDurationValidation" class="text-danger d-block"></span>
                         </div>
                         <div class="col-md-6">
                             <label for="inputQuantity" class="form-label">Quantity <span class="text-danger">*</span></label>
                             <input type="text" id="inputQuantity" class="form-control" />
                             <span id="inputQuantityValidation" class="text-danger d-block"></span>
                         </div>
                          <div class="col-md-6">
                             <label for="inputRefills" class="form-label">Refills</label>
                             <input type="number" id="inputRefills" class="form-control" />
                             <span id="inputRefillsValidation" class="text-danger d-block"></span>
                         </div>
                         <div class="col-md-12">
                             <label for="inputInstructions" class="form-label">Instructions <span class="text-danger">*</span></label>
                             <textarea id="inputInstructions" class="form-control" rows="2"></textarea>
                         </div>
                        <div class="col-md-12">
                             <label for="inputNotes" class="form-label">Notes (Optional)</label>
                             <input type="text" id="inputNotes" class="form-control" />
                         </div>
                         <div class="col-12">
                             <button type="button" id="btnAddItem" class="btn btn-secondary">Add Item to Prescription</button>
                         </div>
                     </div>
                 </div>
            </div>

            <hr class="my-4" /> @* Added horizontal rule for separation *@

            <!-- Section where added items will be displayed -->
            <h5>Added Items:</h5>
            <table class="table table-sm table-striped" id="prescriptionItemsTable">
                <thead>
                    <tr>
                        <th>Medication</th>
                        <th>Dosage</th>
                        <th>Frequency</th>
                        <th>Duration</th>
                        <th>Quantity</th>
                        <th>Instructions</th>
                        <th>Refills</th>
                        <th>Notes</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody>
                    @* Render pre-populated items if copying *@
                    @if (Model.PrescriptionCreate.Items != null)
                    {
                        @for (int i = 0; i < Model.PrescriptionCreate.Items.Count; i++)
                        {
                            var item = Model.PrescriptionCreate.Items[i];
                            <tr>
                                <td>@GetMedicationName(item.MedicationId)</td>
                                <td>@item.Dosage</td>
                                <td>@item.Frequency</td>
                                <td>@item.Duration</td>
                                <td>@item.Quantity</td>
                                <td>@item.Instructions</td>
                                <td>@item.Refills</td>
                                <td>@item.Notes</td>
                                <td><button type="button" class="btn btn-danger btn-sm btn-remove-item">Remove</button></td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
            @* Render hidden fields for pre-populated items outside the table but inside the form *@
            @if (Model.PrescriptionCreate.Items != null)
            {
                @for (int i = 0; i < Model.PrescriptionCreate.Items.Count; i++)
                {
                    var item = Model.PrescriptionCreate.Items[i];
                    <input type="hidden" name="PrescriptionCreate.Items[@i].MedicationId" value="@item.MedicationId" />
                    <input type="hidden" name="PrescriptionCreate.Items[@i].Dosage" value="@item.Dosage" />
                    <input type="hidden" name="PrescriptionCreate.Items[@i].Frequency" value="@item.Frequency" />
                    <input type="hidden" name="PrescriptionCreate.Items[@i].Duration" value="@item.Duration" />
                    <input type="hidden" name="PrescriptionCreate.Items[@i].Quantity" value="@item.Quantity" />
                    <input type="hidden" name="PrescriptionCreate.Items[@i].Instructions" value="@item.Instructions" />
                    <input type="hidden" name="PrescriptionCreate.Items[@i].Refills" value="@item.Refills" />
                    <input type="hidden" name="PrescriptionCreate.Items[@i].Notes" value="@item.Notes" />
                }
            }
            
            @* Associate the validation message for the Items list here *@
            <span asp-validation-for="PrescriptionCreate.Items" class="text-danger"></span> 
            <div id="noItemsMessage" class="alert alert-warning mt-2" style="display: none;">No medication items added yet.</div>

            <hr />

            <div class="form-group mt-3">
                <input type="submit" value="Create Prescription" class="btn btn-primary" />
                <a asp-page="/Prescriptions/Index" class="btn btn-outline-secondary">Cancel</a> 
            </div>
        </form>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script src="~/js/validation-helpers.js"></script> @* Ensure helper script is included *@
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const btnAddItem = document.getElementById('btnAddItem');
            const itemsTableBody = document.querySelector('#prescriptionItemsTable tbody');
            const prescriptionForm = document.getElementById('prescriptionForm');
            const noItemsMessage = document.getElementById('noItemsMessage');
            const formSubmitErrorSpan = document.getElementById('formSubmitError');
            const submitButton = prescriptionForm ? prescriptionForm.querySelector('input[type="submit"]') : null;
            
            // Input fields in the 'Add Item' section
            const selectMedication = document.getElementById('selectMedication');
            const inputDosage = document.getElementById('inputDosage');
            const inputFrequency = document.getElementById('inputFrequency');
            const inputDuration = document.getElementById('inputDuration');
            const inputQuantity = document.getElementById('inputQuantity');
            const inputInstructions = document.getElementById('inputInstructions');
            const inputRefills = document.getElementById('inputRefills'); // Assuming 0 if empty
            const inputNotes = document.getElementById('inputNotes'); // Optional

            // Validation spans for the 'Add Item' section
            const dosageValidationSpan = document.getElementById('inputDosageValidation');
            const frequencyValidationSpan = document.getElementById('inputFrequencyValidation');
            const durationValidationSpan = document.getElementById('inputDurationValidation');
            const quantityValidationSpan = document.getElementById('inputQuantityValidation');
            const refillsValidationSpan = document.getElementById('inputRefillsValidation');
            // Add span for Instructions if needed

            // Main form fields
            const patientSelect = document.getElementById('PrescriptionCreate_PatientId'); // Assuming ID matches asp-for
            const expiryDateInput = document.getElementById('PrescriptionCreate_ExpiryDate');
            const nextAppointmentDateInput = document.getElementById('PrescriptionCreate_NextAppointmentDate');
            const patientValidationSpan = document.querySelector('span[data-valmsg-for="PrescriptionCreate.PatientId"]');
            const expiryDateValidationSpan = document.querySelector('span[data-valmsg-for="PrescriptionCreate.ExpiryDate"]');
            const nextAppointmentDateValidationSpan = document.querySelector('span[data-valmsg-for="PrescriptionCreate.NextAppointmentDate"]');

            // Initialize Select2
            // Ensure jQuery is loaded before this script runs (it is in _Layout.cshtml)
            if (jQuery && jQuery.fn.select2) {
                 $('#PrescriptionCreate_PatientId').select2({
                     theme: 'bootstrap-5',
                     placeholder: '-- Select Patient --',
                     allowClear: true // Optional: Adds a clear button
                 });
                 $('#selectMedication').select2({
                     theme: 'bootstrap-5',
                     placeholder: '-- Select Medication --',
                     allowClear: true // Optional: Adds a clear button
                 });

                 // Handle Select2 validation integration (clearing errors on change)
                 $('#PrescriptionCreate_PatientId').on('change', function() {
                     validatePatientSelected(); // Re-validate on change
                 });
                 $('#selectMedication').on('change', function() {
                     // Clear validation state for medication selection if needed
                     if (selectMedication.classList.contains('is-invalid')) {
                         selectMedication.classList.remove('is-invalid');
                         // Clear any associated error message span if you add one
                     }
                 });
            } else {
                console.error("jQuery or Select2 not loaded correctly.");
            }

            // Initialize index based on server-rendered hidden fields
            let initialItemCount = prescriptionForm.querySelectorAll('input[type="hidden"][name^="PrescriptionCreate.Items"][name$="MedicationId"]').length;
            let itemIndex = initialItemCount;

            // --- Validation Handlers for Add Item section ---
            const validateDosage = () => validateRequiredField(inputDosage, dosageValidationSpan, 'Dosage');
            const validateFrequency = () => validateRequiredField(inputFrequency, frequencyValidationSpan, 'Frequency');
            const validateDuration = () => validateRequiredField(inputDuration, durationValidationSpan, 'Duration');
            const validateQuantityRequired = () => validateRequiredField(inputQuantity, quantityValidationSpan, 'Quantity');
            const validateQuantityFormat = () => validatePositiveNumber(inputQuantity, quantityValidationSpan, 'Quantity');
            const validateRefillsFormat = () => validateNonNegativeInteger(inputRefills, refillsValidationSpan, 'Refills');
            // Add handler for Instructions required validation

            // Combined handlers - Ensure it returns a boolean
            const combinedQuantityHandler = () => {
                const isReqValid = validateRequiredField(inputQuantity, quantityValidationSpan, 'Quantity');
                const isFmtValid = validatePositiveNumber(inputQuantity, quantityValidationSpan, 'Quantity');
                return isReqValid && isFmtValid; // Return combined result
            };

            // --- Attach Listeners to Add Item fields ---
            if (inputDosage) {
                inputDosage.addEventListener('blur', validateDosage);
                inputDosage.addEventListener('input', debounce(validateDosage, 500));
            }
             if (inputFrequency) {
                inputFrequency.addEventListener('blur', validateFrequency);
                inputFrequency.addEventListener('input', debounce(validateFrequency, 500));
            }
             if (inputDuration) {
                inputDuration.addEventListener('blur', validateDuration);
                inputDuration.addEventListener('input', debounce(validateDuration, 500));
            }
            if (inputQuantity) {
                inputQuantity.addEventListener('blur', combinedQuantityHandler);
                inputQuantity.addEventListener('input', debounce(combinedQuantityHandler, 500));
            }
            if (inputRefills) {
                inputRefills.addEventListener('blur', validateRefillsFormat); // Only format check needed
                inputRefills.addEventListener('input', debounce(validateRefillsFormat, 500));
            }
             // Add listeners for Instructions if needed

             // --- Initial Validation Checks for Add Item section ---
             // Optional: Run checks on load if needed
             // combinedQuantityHandler();
             // validateRefillsFormat();

            // Function to update main submit button state
            function updateMainSubmitButtonState() {
                if (!submitButton || !prescriptionForm) return;

                // Check validity of main form fields ONLY (Patient, Dates)
                let mainFieldsValid = true;
                if (patientValidationSpan && patientValidationSpan.textContent.trim() !== '') mainFieldsValid = false;
                if (expiryDateValidationSpan && expiryDateValidationSpan.textContent.trim() !== '') mainFieldsValid = false;
                if (nextAppointmentDateValidationSpan && nextAppointmentDateValidationSpan.textContent.trim() !== '') mainFieldsValid = false;
                if (patientSelect && patientSelect.classList.contains('is-invalid')) mainFieldsValid = false;
                if (expiryDateInput && expiryDateInput.classList.contains('is-invalid')) mainFieldsValid = false;
                if (nextAppointmentDateInput && nextAppointmentDateInput.classList.contains('is-invalid')) mainFieldsValid = false;
                
                // Check if at least one item exists
                const hasItems = itemsTableBody.rows.length > 0;

                submitButton.disabled = !(mainFieldsValid && hasItems);
            }

            function updateNoItemsMessage() {
                const hasRows = itemsTableBody.rows.length > 0;
                noItemsMessage.style.display = hasRows ? 'none' : 'block';
                updateMainSubmitButtonState(); // Update button when item count changes
            }
            
            // Function to add hidden input (simplified)
            function addHiddenInput(name, value) {
                const input = document.createElement('input');
                input.type = 'hidden';
                input.name = name;
                input.value = value ?? '';
                prescriptionForm.appendChild(input);
            }

            // Function to attach remove listener
            function attachRemoveListener(button) {
                 button.addEventListener('click', function() {
                    const row = button.closest('tr');
                    const rowIndex = Array.from(itemsTableBody.rows).indexOf(row); // Get current index before removing row
                    
                    // Remove the hidden fields FIRST - find based on index
                    prescriptionForm.querySelectorAll(`input[type="hidden"][name^='PrescriptionCreate.Items[${rowIndex}]']`).forEach(inp => inp.remove());
                    
                    // Remove the visible table row
                    row.remove();

                    // Renumber the remaining hidden fields
                    renumberHiddenFields();
                    updateNoItemsMessage();
                });
            }

            // Function to renumber hidden fields based on current DOM state
             function renumberHiddenFields() {
                const allHiddenInputs = Array.from(prescriptionForm.querySelectorAll('input[type="hidden"][name^="PrescriptionCreate.Items"]'));
                const itemsData = {}; // Group by logical item based on existing indices

                // Extract data, grouping by index
                allHiddenInputs.forEach(input => {
                    const match = input.name.match(/Items\[(\d+)\]\.(\w+)/);
                    if (match) {
                        const index = match[1];
                        const prop = match[2];
                        if (!itemsData[index]) itemsData[index] = {};
                        itemsData[index][prop] = input.value;
                    }
                });

                // Remove all old hidden inputs related to items
                allHiddenInputs.forEach(input => input.remove());

                // Re-add inputs with sequential indices (0, 1, 2...) from the collected data
                let newIndex = 0;
                // Get the keys (original indices) and sort them numerically to maintain order
                const sortedIndices = Object.keys(itemsData).map(Number).sort((a, b) => a - b);

                sortedIndices.forEach(oldIndex => {
                    const item = itemsData[oldIndex.toString()]; // Use string key to access object
                    const baseName = `PrescriptionCreate.Items[${newIndex}]`;
                    for (const prop in item) {
                         addHiddenInput(`${baseName}.${prop}`, item[prop]);
                    }
                    newIndex++;
                });
                itemIndex = newIndex; // Reset global index counter
            }

             // Attach remove listeners to initially rendered buttons
            itemsTableBody.querySelectorAll('.btn-remove-item').forEach(button => {
                attachRemoveListener(button);
            });


            btnAddItem.addEventListener('click', async function() { // Make async for await
                const medicationId = selectMedication.value;
                const medicationName = selectMedication.options[selectMedication.selectedIndex]?.text;
                const dosage = inputDosage.value;
                const frequency = inputFrequency.value;
                const duration = inputDuration.value;
                const quantity = inputQuantity.value; // Required
                const instructions = inputInstructions.value; // Required
                const refills = inputRefills.value; // Optional, default?
                const notes = inputNotes.value; // Optional

                // --- Trigger validation before adding ---
                // Reset validity flag
                let isItemValid = true; 

                // Validate Medication Selection
                if (!medicationId) {
                    selectMedication.classList.add('is-invalid');
                    // Optionally add a validation message span for medication selection
                    isItemValid = false;
                } else {
                    selectMedication.classList.remove('is-invalid');
                    // Clear any specific medication selection error message span here
                }

                // Validate other fields using helper functions and aggregate results, logging detailed results
                let dosageValid = validateRequiredField(inputDosage, dosageValidationSpan, 'Dosage');
                console.log(`Dosage valid: ${dosageValid}`);
                if (!dosageValid) isItemValid = false;

                let frequencyValid = validateRequiredField(inputFrequency, frequencyValidationSpan, 'Frequency');
                console.log(`Frequency valid: ${frequencyValid}`);
                if (!frequencyValid) isItemValid = false;

                let durationValid = validateRequiredField(inputDuration, durationValidationSpan, 'Duration');
                console.log(`Duration valid: ${durationValid}`);
                if (!durationValid) isItemValid = false;

                let quantityValid = combinedQuantityHandler(); // Use the updated handler
                console.log(`Quantity valid: ${quantityValid}`);
                if (!quantityValid) isItemValid = false;

                let refillsValid = validateNonNegativeInteger(inputRefills, refillsValidationSpan, 'Refills'); // Check format even if optional
                console.log(`Refills format valid: ${refillsValid}`);
                if (!refillsValid) isItemValid = false;

                // Validate Instructions (Required)
                let instructionsValid = validateRequiredField(inputInstructions, null, 'Instructions'); // Pass null for span if none exists, just use class
                console.log(`Instructions valid: ${instructionsValid}`);
                if (!instructionsValid) {
                    inputInstructions.classList.add('is-invalid'); // Manually add class if no span
                    isItemValid = false;
                } else {
                     inputInstructions.classList.remove('is-invalid');
                }

                console.log(`Overall item validity before check: ${isItemValid}`);
                if (!isItemValid) {
                    console.log("Add item validation failed overall. Check individual field logs and highlighted fields.");
                    return; // Stop if validation fails
                }

                // --- (Optional) AJAX Check for Medication ID Existence (example) --- 
                // try {
                //     const response = await fetch(`/Prescriptions/Create?handler=CheckMedicationExists&medicationId=${medicationId}`);
                //     if (!response.ok) throw new Error('Network response was not ok.');
                //     const data = await response.json();
                //     if (!data.exists) {
                //         // Display error next to medication select
                //         console.error(`Medication ID ${medicationId} not found.`);
                //         // Optionally show error message near selectMedication
                //         return;
                //     }
                // } catch (error) {
                //     console.error('Error checking medication:', error);
                //     // Handle fetch error - maybe prevent adding item?
                //     return;
                // }

                // --- Add item to table --- 
                const newRow = itemsTableBody.insertRow();
                newRow.innerHTML = `
                    <td>${medicationName || 'Medication Not Selected'}</td>
                    <td>${dosage}</td>
                    <td>${frequency}</td>
                    <td>${duration}</td>
                    <td>${quantity}</td>
                    <td>${instructions}</td>
                    <td>${refills || 0}</td>
                    <td>${notes}</td>
                    <td><button type="button" class="btn btn-outline-danger btn-sm btn-remove-item" title="Remove Item"><i class="bi bi-trash"></i></button></td>
                `;

                 // --- Add hidden fields ---
                const baseName = `PrescriptionCreate.Items[${itemIndex}]`;
                addHiddenInput(`${baseName}.MedicationId`, medicationId);
                addHiddenInput(`${baseName}.Dosage`, dosage);
                addHiddenInput(`${baseName}.Frequency`, frequency);
                addHiddenInput(`${baseName}.Duration`, duration);
                addHiddenInput(`${baseName}.Quantity`, quantity);
                addHiddenInput(`${baseName}.Instructions`, instructions);
                addHiddenInput(`${baseName}.Refills`, refills || 0);
                addHiddenInput(`${baseName}.Notes`, notes);

                itemIndex++; // Increment index for next item

                // Attach listener to the new remove button
                attachRemoveListener(newRow.querySelector('.btn-remove-item'));

                // Clear input fields after adding
                selectMedication.value = '';
                inputDosage.value = '';
                inputFrequency.value = '';
                inputDuration.value = '';
                inputQuantity.value = '';
                inputInstructions.value = '';
                inputRefills.value = '';
                inputNotes.value = '';

                // Clear validation messages for the add item section
                if(dosageValidationSpan) dosageValidationSpan.textContent = '';
                if(frequencyValidationSpan) frequencyValidationSpan.textContent = '';
                if(durationValidationSpan) durationValidationSpan.textContent = '';
                if(quantityValidationSpan) quantityValidationSpan.textContent = '';
                if(refillsValidationSpan) refillsValidationSpan.textContent = '';
                // Clear instructions validation if span added
                inputDosage.classList.remove('is-invalid');
                inputFrequency.classList.remove('is-invalid');
                inputDuration.classList.remove('is-invalid');
                inputQuantity.classList.remove('is-invalid');
                inputRefills.classList.remove('is-invalid');
                inputInstructions.classList.remove('is-invalid');
                selectMedication.classList.remove('is-invalid');

                updateNoItemsMessage();
            });

            // Client-side validation on final submit for item count
            prescriptionForm.addEventListener('submit', function(event) {
                 const hasItems = itemsTableBody.rows.length > 0;
                 if (formSubmitErrorSpan) formSubmitErrorSpan.textContent = ''; // Clear previous error

                 if (!hasItems) {
                     event.preventDefault();
                     const msg = 'Please add at least one medication item to the prescription before creating.';
                     if (formSubmitErrorSpan) {
                         formSubmitErrorSpan.textContent = msg;
                     } else {
                         alert(msg); // Fallback
                     }
                 }
            });

            // --- Main Form Field Validation --- 
            // Patient Selection (Required)
             const validatePatientSelected = () => {
                 if(patientSelect && !patientSelect.value) {
                    if(patientValidationSpan) patientValidationSpan.textContent = 'Patient is required.';
                    patientSelect.classList.add('is-invalid');
                 } else {
                     if(patientValidationSpan && patientValidationSpan.textContent === 'Patient is required.') {
                        patientValidationSpan.textContent = '';
                     }
                     if(patientSelect && !patientValidationSpan?.textContent) {
                         patientSelect.classList.remove('is-invalid');
                     }
                 }
                 updateMainSubmitButtonState();
             };
             if(patientSelect) {
                 patientSelect.addEventListener('change', validatePatientSelected);
                 patientSelect.addEventListener('blur', validatePatientSelected);
             }

            // Client-side Date Validation (using shared helper)
            // Define handler for cross-field date validation
            const expiryVsAppointmentHandler = () => {
                validateDateBAfterDateA(
                    nextAppointmentDateInput, 
                    expiryDateInput, 
                    nextAppointmentDateValidationSpan, 
                    expiryDateValidationSpan, 
                    'Next Appointment Date', 
                    'Expiry Date'
                );
                 updateMainSubmitButtonState(); // Update after cross-check
            };

            if (expiryDateInput) {
                const prefix = expiryDateInput.labels[0]?.textContent || 'Expiry Date';
                const handler = () => {
                     validateDateIsFuture(expiryDateInput, expiryDateValidationSpan, prefix);
                     expiryVsAppointmentHandler(); // This calls updateMainSubmitButtonState
                };
                expiryDateInput.addEventListener('change', handler);
                expiryDateInput.addEventListener('blur', handler);
            }
            if (nextAppointmentDateInput) {
                const prefix = nextAppointmentDateInput.labels[0]?.textContent || 'Next Appointment Date';
                 const handler = () => {
                     validateDateIsFuture(nextAppointmentDateInput, nextAppointmentDateValidationSpan, prefix);
                     expiryVsAppointmentHandler(); // This calls updateMainSubmitButtonState
                 };
                nextAppointmentDateInput.addEventListener('change', handler);
                nextAppointmentDateInput.addEventListener('blur', handler);
            }

            // --- Initial State Checks ---
            updateNoItemsMessage(); // This also calls updateMainSubmitButtonState initially
            validatePatientSelected(); // Initial patient check
            // Initial date checks (if needed, else rely on blur/change)
             if (expiryDateInput?.value) {
                 validateDateIsFuture(expiryDateInput, expiryDateValidationSpan, expiryDateInput.labels[0]?.textContent || 'Expiry Date');
             }
             if (nextAppointmentDateInput?.value) {
                 validateDateIsFuture(nextAppointmentDateInput, nextAppointmentDateValidationSpan, nextAppointmentDateInput.labels[0]?.textContent || 'Next Appointment Date');
             }
             expiryVsAppointmentHandler(); // Initial cross check
            updateMainSubmitButtonState(); // Final overall check
        });
    </script>
}
