@page
@model Roshta.Pages.Prescriptions.CreateModel

@{ 
    // Using the correct namespace from the PageModel file
    ViewData["Title"] = "Create Prescription";
}

<h1>@ViewData["Title"]</h1>

<hr />
<div class="row">
    <div class="col-md-8"> 
        <form method="post" id="prescriptionForm">
            @Html.AntiForgeryToken() 
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>

            <h4>Prescription Details</h4>
            <div class="row mb-3">
                <div class="col-md-6">
                    <label asp-for="PrescriptionCreate.PatientId" class="control-label"></label>
                    <select asp-for="PrescriptionCreate.PatientId" class="form-select" asp-items="Model.PatientSelectList">
                        <option value="">-- Select Patient --</option>
                    </select>
                    <span asp-validation-for="PrescriptionCreate.PatientId" class="text-danger"></span>
                </div>
                <div class="col-md-6">
                    <label asp-for="PrescriptionCreate.ExpiryDate" class="control-label"></label>
                    <input asp-for="PrescriptionCreate.ExpiryDate" class="form-control" />
                    <span asp-validation-for="PrescriptionCreate.ExpiryDate" class="text-danger"></span>
                </div>
            </div>
            <div class="row mb-3">
                 <div class="col-md-6">
                    <label asp-for="PrescriptionCreate.NextAppointmentDate" class="control-label"></label>
                    <input asp-for="PrescriptionCreate.NextAppointmentDate" class="form-control" />
                    <span asp-validation-for="PrescriptionCreate.NextAppointmentDate" class="text-danger"></span>
                </div>
            </div>

            <hr />

            <h4>Medication Items</h4>
            
            <!-- Section for adding a new item -->
            <div class="card mb-3" id="addItemSection">
                <div class="card-header">Add Medication</div>
                <div class="card-body">
                    <div class="row g-3">
                        <div class="col-md-12">
                            <label for="selectMedication" class="form-label">Medication</label>
                            <select id="selectMedication" class="form-select" asp-items="Model.MedicationSelectList"> 
                                <option value="">-- Select Medication --</option>
                            </select>
                        </div>
                         <div class="col-md-4">
                            <label for="inputDosage" class="form-label">Dosage</label>
                            <input type="text" id="inputDosage" class="form-control" placeholder="e.g., 500mg, 10ml" />
                        </div>
                         <div class="col-md-4">
                            <label for="inputFrequency" class="form-label">Frequency</label>
                            <input type="text" id="inputFrequency" class="form-control" placeholder="e.g., Twice daily" />
                        </div>
                        <div class="col-md-4">
                            <label for="inputDuration" class="form-label">Duration</label>
                            <input type="text" id="inputDuration" class="form-control" placeholder="e.g., 10 days" />
                        </div>
                        <div class="col-md-6">
                            <label for="inputQuantity" class="form-label">Quantity <span class="text-danger">*</span></label>
                            <input type="text" id="inputQuantity" class="form-control" required/>
                        </div>
                         <div class="col-md-6">
                            <label for="inputRefills" class="form-label">Refills</label>
                            <input type="number" id="inputRefills" class="form-control" />
                        </div>
                        <div class="col-md-12">
                            <label for="inputInstructions" class="form-label">Instructions <span class="text-danger">*</span></label>
                            <textarea id="inputInstructions" class="form-control" rows="2" required></textarea>
                        </div>
                       <div class="col-md-12">
                            <label for="inputNotes" class="form-label">Notes (Optional)</label>
                            <input type="text" id="inputNotes" class="form-control" />
                        </div>
                        <div class="col-12">
                            <button type="button" id="btnAddItem" class="btn btn-secondary">Add Item to Prescription</button>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Section where added items will be displayed -->
            <h5>Added Items:</h5>
            <table class="table table-sm" id="prescriptionItemsTable">
                <thead>
                    <tr>
                        <th>Medication</th>
                        <th>Dosage</th>
                        <th>Frequency</th>
                        <th>Duration</th>
                        <th>Quantity</th>
                        <th>Instructions</th>
                        <th>Refills</th>
                        <th>Notes</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody>
                    <!-- Rows for added items will be injected here by JavaScript -->
                </tbody>
            </table>
            <div id="noItemsMessage" class="alert alert-warning" style="display: none;">No medication items added yet.</div>

            <hr />

            <div class="form-group mt-3">
                <input type="submit" value="Create Prescription" class="btn btn-primary" />
                <a asp-page="/Index" class="btn btn-outline-secondary">Cancel</a>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const btnAddItem = document.getElementById('btnAddItem');
            const itemsTableBody = document.querySelector('#prescriptionItemsTable tbody');
            const prescriptionForm = document.getElementById('prescriptionForm');
            const noItemsMessage = document.getElementById('noItemsMessage');
            let itemIndex = 0; // Counter for naming hidden fields

            function updateNoItemsMessage() {
                noItemsMessage.style.display = itemsTableBody.rows.length === 0 ? 'block' : 'none';
            }

            // Make the event listener async to use await for fetch
            btnAddItem.addEventListener('click', async function () { 
                // 1. Get values from the input fields
                const medicationSelect = document.getElementById('selectMedication');
                const medicationId = medicationSelect.value;
                const medicationName = medicationSelect.options[medicationSelect.selectedIndex].text;
                const dosage = document.getElementById('inputDosage').value || null;
                const frequency = document.getElementById('inputFrequency').value || null;
                const duration = document.getElementById('inputDuration').value || null;
                const quantity = document.getElementById('inputQuantity').value;
                const instructions = document.getElementById('inputInstructions').value;
                const refills = document.getElementById('inputRefills').value || null;
                const notes = document.getElementById('inputNotes').value || null;

                // 2. Basic Client-Side Validation 
                if (!medicationId || !quantity || !instructions) {
                    alert('Please select a medication and enter quantity and instructions.');
                    return;
                }
                
                // *** NEW: Check if medication exists via AJAX ***
                try {
                    const response = await fetch(`?handler=CheckMedicationExists&id=${medicationId}`);
                    if (!response.ok) {
                         throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    const data = await response.json();

                    if (!data.exists) {
                        alert(`Sorry, the selected medication '${medicationName}' is no longer available or invalid. Please choose another.`);
                        // Optionally, remove the invalid item from the dropdown here
                        // medicationSelect.querySelector(`option[value="${medicationId}"]`).remove();
                        medicationSelect.value = ''; // Reset selection
                        return; // Stop processing this item
                    }
                } catch (error) {
                    console.error('Error checking medication existence:', error);
                    alert('An error occurred while verifying the medication. Please try again.');
                    return; // Stop processing on error
                }
                // *** END NEW ***

                // 3. Create table row to display the item
                const newRow = itemsTableBody.insertRow();
                newRow.innerHTML = `
                    <td>${medicationName}</td>
                    <td>${dosage ?? ''}</td>
                    <td>${frequency ?? ''}</td>
                    <td>${duration ?? ''}</td>
                    <td>${quantity}</td>
                    <td>${instructions}</td>
                    <td>${refills ?? ''}</td>
                    <td>${notes ?? ''}</td>
                    <td><button type="button" class="btn btn-danger btn-sm btn-remove-item">Remove</button></td>
                `;

                // 4. Create hidden input fields for model binding
                function addHiddenInput(name, value) {
                    const input = document.createElement('input');
                    input.type = 'hidden';
                    input.name = name;
                    input.value = value ?? ''; // Ensure value is not null
                    prescriptionForm.appendChild(input); // Append directly to form
                }
                
                const baseName = `PrescriptionCreate.Items[${itemIndex}]`;
                addHiddenInput(`${baseName}.MedicationId`, medicationId);
                addHiddenInput(`${baseName}.Dosage`, dosage);
                addHiddenInput(`${baseName}.Frequency`, frequency);
                addHiddenInput(`${baseName}.Duration`, duration);
                addHiddenInput(`${baseName}.Quantity`, quantity);
                addHiddenInput(`${baseName}.Instructions`, instructions);
                addHiddenInput(`${baseName}.Refills`, refills);
                addHiddenInput(`${baseName}.Notes`, notes);

                // Add event listener to the new remove button
                newRow.querySelector('.btn-remove-item').addEventListener('click', function() {
                    // Remove corresponding hidden fields based on the baseName used when created
                    const currentBaseName = `PrescriptionCreate.Items\[${Array.from(itemsTableBody.rows).indexOf(newRow)}\]`; // Need to escape brackets for querySelectorAll
                    // It's safer to find the hidden inputs associated with *this row* before renumbering
                    // We can perhaps add a data attribute to the row or the button, or find inputs based on value if unique.
                    // For now, we assume renumbering handles finding the correct ones to delete.

                    // Remove table row
                    newRow.remove();
                    
                    // Renumber subsequent hidden fields (Important!)
                    renumberHiddenFields();
                    updateNoItemsMessage();
                });

                // 5. Clear input fields
                medicationSelect.value = '';
                document.getElementById('inputDosage').value = '';
                document.getElementById('inputFrequency').value = '';
                document.getElementById('inputDuration').value = '';
                document.getElementById('inputQuantity').value = '';
                document.getElementById('inputInstructions').value = '';
                document.getElementById('inputRefills').value = '';
                document.getElementById('inputNotes').value = '';

                itemIndex++; // Increment index for the next item
                updateNoItemsMessage();
            });

            function renumberHiddenFields() {
                const allHiddenInputs = Array.from(prescriptionForm.querySelectorAll('input[type="hidden"][name^="PrescriptionCreate.Items"]'));
                const itemsData = {}; // Group by logical item based on existing indices

                // Extract data, grouping by index
                allHiddenInputs.forEach(input => {
                    const match = input.name.match(/Items\[(\d+)\]\.(\w+)/);
                    if (match) {
                        const index = match[1];
                        const prop = match[2];
                        if (!itemsData[index]) itemsData[index] = {};
                        itemsData[index][prop] = input.value;
                    }
                });

                // Remove all old hidden inputs related to items
                allHiddenInputs.forEach(input => input.remove());

                // Re-add inputs with sequential indices from the collected data
                let newIndex = 0;
                // Process indices in their original order to maintain sequence
                const sortedIndices = Object.keys(itemsData).sort((a, b) => parseInt(a) - parseInt(b)); 

                sortedIndices.forEach(oldIndex => {
                    const item = itemsData[oldIndex];
                    const baseName = `PrescriptionCreate.Items[${newIndex}]`;
                    for (const prop in item) {
                        const input = document.createElement('input');
                        input.type = 'hidden';
                        input.name = `${baseName}.${prop}`;
                        input.value = item[prop] ?? '';
                        prescriptionForm.appendChild(input);
                    }
                    newIndex++;
                });
                itemIndex = newIndex; // Reset global index counter to the new count
            }

            // Add event listeners to any existing remove buttons if the page was reloaded with errors
            itemsTableBody.querySelectorAll('.btn-remove-item').forEach(button => {
                 button.addEventListener('click', function() {
                    const row = button.closest('tr');
                    // Similar logic to remove hidden fields based on row index needs careful implementation
                    // This part is tricky if fields aren't directly associated with the row visually.
                    row.remove();
                    renumberHiddenFields();
                    updateNoItemsMessage();
                });
            });

            // Initial state
            updateNoItemsMessage(); 
        });
    </script>
} 