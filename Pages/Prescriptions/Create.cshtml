@page
@model Roshta.Pages.Prescriptions.CreateModel
@using Roshta.ViewModels // Added for referencing PrescriptionItemCreateModel

@{
    ViewData["Title"] = "Create Prescription";
    // Helper function to safely get medication name
    Func<int, string> GetMedicationName = (id) =>
        Model.MedicationSelectList?.FirstOrDefault(m => m.Value == id.ToString())?.Text ?? $"ID: {id} (Not Found)";
}

<h1>@ViewData["Title"]</h1>

<hr />
<div class="row">
    <div class="col-md-8"> 
        <form method="post" id="prescriptionForm">
            @Html.AntiForgeryToken() 
            @* Display validation summary for model-level errors (like item count) *@
            <div asp-validation-summary="ModelOnly" class="text-danger mb-3"></div>

            <h4>Prescription Details</h4>
            <div class="row mb-3">
                <div class="col-md-6">
                    <label asp-for="PrescriptionCreate.PatientId" class="control-label"></label>
                    <select asp-for="PrescriptionCreate.PatientId" class="form-select" asp-items="Model.PatientSelectList">
                        <option value="">-- Select Patient --</option>
                    </select>
                    <span asp-validation-for="PrescriptionCreate.PatientId" class="text-danger"></span>
                </div>
                <div class="col-md-6">
                    <label asp-for="PrescriptionCreate.ExpiryDate" class="control-label"></label>
                    <input asp-for="PrescriptionCreate.ExpiryDate" class="form-control" />
                    <span asp-validation-for="PrescriptionCreate.ExpiryDate" class="text-danger"></span>
                </div>
            </div>
            <div class="row mb-3">
                 <div class="col-md-6">
                    <label asp-for="PrescriptionCreate.NextAppointmentDate" class="control-label"></label>
                    <input asp-for="PrescriptionCreate.NextAppointmentDate" class="form-control" />
                    <span asp-validation-for="PrescriptionCreate.NextAppointmentDate" class="text-danger"></span>
                </div>
                 @* Placeholder for general form error message (e.g., if no items added) *@
                 <div class="col-md-6 align-self-end">
                    <span id="formSubmitError" class="text-danger"></span>
                 </div>
            </div>

            <hr />

            <h4>Medication Items</h4>

             <!-- Section for adding a new item -->
            <div class="card mb-3" id="addItemSection">
                 <div class="card-header">Add Medication</div>
                 <div class="card-body">
                     <div class="row g-3">
                         <div class="col-md-12">
                             <label for="selectMedication" class="form-label">Medication</label>
                             <select id="selectMedication" class="form-select" asp-items="Model.MedicationSelectList"> 
                                 <option value="">-- Select Medication --</option>
                             </select>
                         </div>
                          <div class="col-md-4">
                             <label for="inputDosage" class="form-label">Dosage</label>
                             <input type="text" id="inputDosage" class="form-control" placeholder="e.g., 500mg, 10ml" />
                         </div>
                          <div class="col-md-4">
                             <label for="inputFrequency" class="form-label">Frequency</label>
                             <input type="text" id="inputFrequency" class="form-control" placeholder="e.g., Twice daily" />
                         </div>
                         <div class="col-md-4">
                             <label for="inputDuration" class="form-label">Duration</label>
                             <input type="text" id="inputDuration" class="form-control" placeholder="e.g., 10 days" />
                         </div>
                         <div class="col-md-6">
                             <label for="inputQuantity" class="form-label">Quantity <span class="text-danger">*</span></label>
                             <input type="text" id="inputQuantity" class="form-control" />
                         </div>
                          <div class="col-md-6">
                             <label for="inputRefills" class="form-label">Refills</label>
                             <input type="number" id="inputRefills" class="form-control" />
                         </div>
                         <div class="col-md-12">
                             <label for="inputInstructions" class="form-label">Instructions <span class="text-danger">*</span></label>
                             <textarea id="inputInstructions" class="form-control" rows="2"></textarea>
                         </div>
                        <div class="col-md-12">
                             <label for="inputNotes" class="form-label">Notes (Optional)</label>
                             <input type="text" id="inputNotes" class="form-control" />
                         </div>
                         <div class="col-12">
                             <button type="button" id="btnAddItem" class="btn btn-secondary">Add Item to Prescription</button>
                         </div>
                     </div>
                 </div>
            </div>

            <!-- Section where added items will be displayed -->
            <h5>Added Items:</h5>
            <table class="table table-sm table-striped" id="prescriptionItemsTable">
                <thead>
                    <tr>
                        <th>Medication</th>
                        <th>Dosage</th>
                        <th>Frequency</th>
                        <th>Duration</th>
                        <th>Quantity</th>
                        <th>Instructions</th>
                        <th>Refills</th>
                        <th>Notes</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody>
                    @* Render pre-populated items if copying *@
                    @if (Model.PrescriptionCreate.Items != null)
                    {
                        @for (int i = 0; i < Model.PrescriptionCreate.Items.Count; i++)
                        {
                            var item = Model.PrescriptionCreate.Items[i];
                            <tr>
                                <td>@GetMedicationName(item.MedicationId)</td>
                                <td>@item.Dosage</td>
                                <td>@item.Frequency</td>
                                <td>@item.Duration</td>
                                <td>@item.Quantity</td>
                                <td>@item.Instructions</td>
                                <td>@item.Refills</td>
                                <td>@item.Notes</td>
                                <td><button type="button" class="btn btn-danger btn-sm btn-remove-item">Remove</button></td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
            @* Render hidden fields for pre-populated items outside the table but inside the form *@
            @if (Model.PrescriptionCreate.Items != null)
            {
                @for (int i = 0; i < Model.PrescriptionCreate.Items.Count; i++)
                {
                    var item = Model.PrescriptionCreate.Items[i];
                    <input type="hidden" name="PrescriptionCreate.Items[@i].MedicationId" value="@item.MedicationId" />
                    <input type="hidden" name="PrescriptionCreate.Items[@i].Dosage" value="@item.Dosage" />
                    <input type="hidden" name="PrescriptionCreate.Items[@i].Frequency" value="@item.Frequency" />
                    <input type="hidden" name="PrescriptionCreate.Items[@i].Duration" value="@item.Duration" />
                    <input type="hidden" name="PrescriptionCreate.Items[@i].Quantity" value="@item.Quantity" />
                    <input type="hidden" name="PrescriptionCreate.Items[@i].Instructions" value="@item.Instructions" />
                    <input type="hidden" name="PrescriptionCreate.Items[@i].Refills" value="@item.Refills" />
                    <input type="hidden" name="PrescriptionCreate.Items[@i].Notes" value="@item.Notes" />
                }
            }
            
            @* Associate the validation message for the Items list here *@
            <span asp-validation-for="PrescriptionCreate.Items" class="text-danger"></span> 
            <div id="noItemsMessage" class="alert alert-warning mt-2" style="display: none;">No medication items added yet.</div>

            <hr />

            <div class="form-group mt-3">
                <input type="submit" value="Create Prescription" class="btn btn-primary" />
                <a asp-page="/Prescriptions/Index" class="btn btn-outline-secondary">Cancel</a> 
            </div>
        </form>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const btnAddItem = document.getElementById('btnAddItem');
            const itemsTableBody = document.querySelector('#prescriptionItemsTable tbody');
            const prescriptionForm = document.getElementById('prescriptionForm');
            const noItemsMessage = document.getElementById('noItemsMessage');
            const formSubmitErrorSpan = document.getElementById('formSubmitError'); 

            // Initialize index based on server-rendered hidden fields
            let initialItemCount = prescriptionForm.querySelectorAll('input[type="hidden"][name^="PrescriptionCreate.Items"][name$="MedicationId"]').length;
            let itemIndex = initialItemCount;

            function updateNoItemsMessage() {
                const hasRows = itemsTableBody.rows.length > 0;
                noItemsMessage.style.display = hasRows ? 'none' : 'block';
            }
            
            // Function to add hidden input (simplified)
            function addHiddenInput(name, value) {
                const input = document.createElement('input');
                input.type = 'hidden';
                input.name = name;
                input.value = value ?? '';
                prescriptionForm.appendChild(input);
            }

            // Function to attach remove listener
            function attachRemoveListener(button) {
                 button.addEventListener('click', function() {
                    const row = button.closest('tr');
                    const rowIndex = Array.from(itemsTableBody.rows).indexOf(row); // Get current index before removing row
                    
                    // Remove the hidden fields FIRST - find based on index
                    prescriptionForm.querySelectorAll(`input[type="hidden"][name^='PrescriptionCreate.Items[${rowIndex}]']`).forEach(inp => inp.remove());
                    
                    // Remove the visible table row
                    row.remove();

                    // Renumber the remaining hidden fields
                    renumberHiddenFields();
                    updateNoItemsMessage();
                });
            }

            // Function to renumber hidden fields based on current DOM state
             function renumberHiddenFields() {
                const allHiddenInputs = Array.from(prescriptionForm.querySelectorAll('input[type="hidden"][name^="PrescriptionCreate.Items"]'));
                const itemsData = {}; // Group by logical item based on existing indices

                // Extract data, grouping by index
                allHiddenInputs.forEach(input => {
                    const match = input.name.match(/Items\[(\d+)\]\.(\w+)/);
                    if (match) {
                        const index = match[1];
                        const prop = match[2];
                        if (!itemsData[index]) itemsData[index] = {};
                        itemsData[index][prop] = input.value;
                    }
                });

                // Remove all old hidden inputs related to items
                allHiddenInputs.forEach(input => input.remove());

                // Re-add inputs with sequential indices (0, 1, 2...) from the collected data
                let newIndex = 0;
                // Get the keys (original indices) and sort them numerically to maintain order
                const sortedIndices = Object.keys(itemsData).map(Number).sort((a, b) => a - b);

                sortedIndices.forEach(oldIndex => {
                    const item = itemsData[oldIndex.toString()]; // Use string key to access object
                    const baseName = `PrescriptionCreate.Items[${newIndex}]`;
                    for (const prop in item) {
                         addHiddenInput(`${baseName}.${prop}`, item[prop]);
                    }
                    newIndex++;
                });
                itemIndex = newIndex; // Reset global index counter
            }

             // Attach remove listeners to initially rendered buttons
            itemsTableBody.querySelectorAll('.btn-remove-item').forEach(button => {
                attachRemoveListener(button);
            });


            btnAddItem.addEventListener('click', async function () {
                // --- (1. Get values - unchanged) ---
                 const medicationSelect = document.getElementById('selectMedication');
                 const medicationId = medicationSelect.value;
                 const medicationName = medicationSelect.options[medicationSelect.selectedIndex].text;
                 const dosage = document.getElementById('inputDosage').value || null;
                 const frequency = document.getElementById('inputFrequency').value || null;
                 const duration = document.getElementById('inputDuration').value || null;
                 const quantity = document.getElementById('inputQuantity').value;
                 const instructions = document.getElementById('inputInstructions').value;
                 const refills = document.getElementById('inputRefills').value || null;
                 const notes = document.getElementById('inputNotes').value || null;

                // --- (2. Basic Client Validation - unchanged) ---
                if (!medicationId || !quantity || !instructions) {
                    alert('Please select a medication and enter quantity and instructions.');
                    return;
                }
                
                 // --- (AJAX Check - unchanged) ---
                 try {
                    const response = await fetch(`?handler=CheckMedicationExists&id=${medicationId}`);
                    if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
                    const data = await response.json();
                    if (!data.exists) {
                        alert(`Sorry, the selected medication '${medicationName}' is no longer available or invalid.`);
                        medicationSelect.value = '';
                        return;
                    }
                } catch (error) {
                    console.error('Error checking medication existence:', error);
                    alert('An error occurred verifying medication. Please try again.');
                    return;
                }

                // --- (3. Create table row - unchanged) ---
                const newRow = itemsTableBody.insertRow();
                newRow.innerHTML = `
                    <td>${medicationName}</td>
                    <td>${dosage ?? ''}</td>
                    <td>${frequency ?? ''}</td>
                    <td>${duration ?? ''}</td>
                    <td>${quantity}</td>
                    <td>${instructions}</td>
                    <td>${refills ?? ''}</td>
                    <td>${notes ?? ''}</td>
                    <td><button type="button" class="btn btn-danger btn-sm btn-remove-item">Remove</button></td>
                `;

                // --- (4. Create hidden fields) ---
                const baseName = `PrescriptionCreate.Items[${itemIndex}]`; // Use current itemIndex
                addHiddenInput(`${baseName}.MedicationId`, medicationId);
                addHiddenInput(`${baseName}.Dosage`, dosage);
                addHiddenInput(`${baseName}.Frequency`, frequency);
                addHiddenInput(`${baseName}.Duration`, duration);
                addHiddenInput(`${baseName}.Quantity`, quantity);
                addHiddenInput(`${baseName}.Instructions`, instructions);
                addHiddenInput(`${baseName}.Refills`, refills);
                addHiddenInput(`${baseName}.Notes`, notes);

                // --- (Attach listener - unchanged) ---
                attachRemoveListener(newRow.querySelector('.btn-remove-item'));

                // --- (5. Clear inputs - unchanged) ---
                medicationSelect.value = '';
                document.getElementById('inputDosage').value = '';
                document.getElementById('inputFrequency').value = '';
                document.getElementById('inputDuration').value = '';
                document.getElementById('inputQuantity').value = '';
                document.getElementById('inputInstructions').value = '';
                document.getElementById('inputRefills').value = '';
                document.getElementById('inputNotes').value = '';

                itemIndex++; // Increment index for the next dynamically added item
                updateNoItemsMessage();
            });

            // Client-side validation on final submit for item count
            prescriptionForm.addEventListener('submit', function(event) {
                 const hasItems = itemsTableBody.rows.length > 0;
                 if (formSubmitErrorSpan) formSubmitErrorSpan.textContent = ''; // Clear previous error

                 if (!hasItems) {
                     event.preventDefault();
                     const msg = 'Please add at least one medication item to the prescription before creating.';
                     if (formSubmitErrorSpan) {
                         formSubmitErrorSpan.textContent = msg;
                     } else {
                         alert(msg); // Fallback
                     }
                 }
            });

            // Client-side Date Validation (using shared helper)
            const expiryDateInput = document.getElementById('PrescriptionCreate_ExpiryDate');
            const nextAppointmentDateInput = document.getElementById('PrescriptionCreate_NextAppointmentDate');
            const expiryDateValidationSpan = document.querySelector('span[data-valmsg-for="PrescriptionCreate.ExpiryDate"]');
            const nextAppointmentDateValidationSpan = document.querySelector('span[data-valmsg-for="PrescriptionCreate.NextAppointmentDate"]');

            // Define handler for cross-field date validation
            const expiryVsAppointmentHandler = () => {
                validateDateBAfterDateA(
                    nextAppointmentDateInput, 
                    expiryDateInput, 
                    nextAppointmentDateValidationSpan, 
                    expiryDateValidationSpan, 
                    'Next Appointment Date', 
                    'Expiry Date'
                );
            };

            if (expiryDateInput) {
                const prefix = expiryDateInput.labels[0]?.textContent || 'Expiry Date';
                const handler = () => {
                     validateDateIsFuture(expiryDateInput, expiryDateValidationSpan, prefix);
                     expiryVsAppointmentHandler(); // Also check cross-field rule
                };
                expiryDateInput.addEventListener('change', handler);
                expiryDateInput.addEventListener('blur', handler);
            }
            if (nextAppointmentDateInput) {
                const prefix = nextAppointmentDateInput.labels[0]?.textContent || 'Next Appointment Date';
                 const handler = () => {
                     validateDateIsFuture(nextAppointmentDateInput, nextAppointmentDateValidationSpan, prefix);
                     expiryVsAppointmentHandler(); // Also check cross-field rule
                 };
                nextAppointmentDateInput.addEventListener('change', handler);
                nextAppointmentDateInput.addEventListener('blur', handler);
            }

            // Initial state check
            updateNoItemsMessage();
        });
    </script>
} 