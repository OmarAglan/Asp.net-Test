@page
@model Roshta.Pages_Medications.CreateModel

        @{
        ViewData["Title"] = "Create";
        }
        
        <h1>Create</h1>
        
    <h4>Medication</h4>
    <hr />
    <div class="row">
    <div class="col-md-4">
    <form method="post">
    <div asp-validation-summary="ModelOnly" class="text-danger mb-3"></div> @* Added mb-3 *@
            <div class="mb-3"> @* Replaced form-group with mb-3 *@
                <label asp-for="Medication.Name" class="form-label"><span class="text-danger">*</span> @Html.DisplayNameFor(m => m.Medication.Name)</label> @* Added form-label, moved asterisk *@
                <input asp-for="Medication.Name" class="form-control" id="Medication_Name" />
                <span asp-validation-for="Medication.Name" class="text-danger d-block"></span> @* Added d-block *@
            </div>
            <div class="mb-3"> @* Replaced form-group with mb-3 *@
                <label asp-for="Medication.Dosage" class="form-label"></label> @* Added form-label *@
                <input asp-for="Medication.Dosage" class="form-control" />
                <span asp-validation-for="Medication.Dosage" class="text-danger d-block"></span> @* Added d-block *@
            </div>
            <div class="mb-3"> @* Replaced form-group with mb-3 *@
                <label asp-for="Medication.Form" class="form-label"></label> @* Added form-label *@
                <input asp-for="Medication.Form" class="form-control" />
                <span asp-validation-for="Medication.Form" class="text-danger d-block"></span> @* Added d-block *@
            </div>
            <div class="mb-3"> @* Replaced form-group with mb-3 *@
                <label asp-for="Medication.Manufacturer" class="form-label"></label> @* Added form-label *@
                <input asp-for="Medication.Manufacturer" class="form-control" />
                <span asp-validation-for="Medication.Manufacturer" class="text-danger d-block"></span> @* Added d-block *@
            </div>
            @* Hide CreatedAt/UpdatedAt on Create form *@
            @* <div class="mb-3"> 
                <label asp-for="Medication.CreatedAt" class="form-label"></label>
                <input asp-for="Medication.CreatedAt" class="form-control" />
                <span asp-validation-for="Medication.CreatedAt" class="text-danger d-block"></span>
            </div>
            <div class="mb-3"> 
                <label asp-for="Medication.UpdatedAt" class="form-label"></label>
                <input asp-for="Medication.UpdatedAt" class="form-control" />
                <span asp-validation-for="Medication.UpdatedAt" class="text-danger d-block"></span>
            </div> *@
            <div class="mt-4"> @* Replaced form-group with mt-4 for button spacing *@
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div class="mt-3"> @* Added margin top for spacing *@
    <a asp-page="Index" class="btn btn-outline-secondary">Back to List</a> @* Added btn classes *@
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script src="~/js/validation-helpers.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Get form and submit button
            const medicationForm = document.querySelector('form');
            const submitButton = medicationForm ? medicationForm.querySelector('input[type="submit"], button[type="submit"]') : null;

            // Get Name input and validation span
            const nameInput = document.getElementById('Medication_Name');
            const nameValidationSpan = document.querySelector('span[data-valmsg-for="Medication.Name"]');

            // Function to update submit button state
            function updateSubmitButtonState() {
                if (!submitButton || !medicationForm) return;
                const isValid = isFormClientSideValid(medicationForm);
                submitButton.disabled = !isValid;
            }

            // Validation handler for Name
            const nameRequiredHandler = () => {
                validateRequiredField(nameInput, nameValidationSpan, 'Name');
                updateSubmitButtonState(); // Update button state after validation
            };

            // Add listeners
            if (nameInput) {
                nameInput.addEventListener('blur', nameRequiredHandler);
                nameInput.addEventListener('input', debounce(nameRequiredHandler, 500));
            }

            // Initial checks on load
            if (nameInput) nameRequiredHandler();
            updateSubmitButtonState(); // Set initial button state

            // --- Add call for uniqueness check ---
            setupMedicationNameUniquenessCheck('/Medications/Create'); 
            // Note: The uniqueness check itself will also update the button state indirectly 
            // by adding/removing 'is-invalid' class, which isFormClientSideValid checks.
            // If more direct control is needed, the uniqueness check could also call updateSubmitButtonState.
            // ---------------------------------------
        });
    </script>
}
