@page
@model Roshta.Pages.DoctorProfile.EditModel
@{
    ViewData["Title"] = "Edit Doctor Profile";
}

<h2>@ViewData["Title"]</h2>
<hr />

@* TempData messages will now be shown as toasts via JavaScript below *@

<div class="row">
    <div class="col-md-6">
        <form method="post">
            <div asp-validation-summary="ModelOnly" class="text-danger mb-3"></div> @* Added mb-3 *@
            
            <div class="mb-3"> @* Standardized to mb-3 *@
                <label asp-for="DoctorProfile.Name" class="form-label"></label> @* Changed to form-label *@
                <input asp-for="DoctorProfile.Name" class="form-control" />
                <span asp-validation-for="DoctorProfile.Name" class="text-danger d-block"></span> @* Added d-block *@
            </div>

            <div class="mb-3"> @* Standardized to mb-3 *@
                <label asp-for="DoctorProfile.Specialization" class="form-label"></label> @* Changed to form-label *@
                <input asp-for="DoctorProfile.Specialization" class="form-control" />
                <span asp-validation-for="DoctorProfile.Specialization" class="text-danger d-block"></span> @* Added d-block *@
            </div>

            <div class="mb-3"> @* Standardized to mb-3 *@
                <label asp-for="DoctorProfile.LicenseNumber" class="form-label"></label> @* Changed to form-label *@
                <input asp-for="DoctorProfile.LicenseNumber" class="form-control" />
                <span asp-validation-for="DoctorProfile.LicenseNumber" class="text-danger d-block"></span> @* Added d-block *@
            </div>

             <div class="mb-3"> @* Standardized to mb-3 *@
                <label asp-for="DoctorProfile.ContactPhone" class="form-label"></label> @* Changed to form-label *@
                <input asp-for="DoctorProfile.ContactPhone" class="form-control" />
                <span asp-validation-for="DoctorProfile.ContactPhone" class="text-danger d-block"></span> @* Added d-block *@
            </div>

            <div class="mb-3"> @* Standardized to mb-3 *@
                <label asp-for="DoctorProfile.ContactEmail" class="form-label"></label> @* Changed to form-label *@
                <input asp-for="DoctorProfile.ContactEmail" class="form-control" />
                <span asp-validation-for="DoctorProfile.ContactEmail" class="text-danger d-block"></span> @* Added d-block *@
            </div>

            <div class="mt-4"> @* Standardized to mt-4 *@
                <button type="submit" class="btn btn-primary">Save Changes</button>
                <a asp-page="/Index" class="btn btn-outline-secondary">Cancel</a> @* Changed to outline *@
            </div>
        </form>
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script src="~/lib/imask/imask.min.js"></script>
    <script src="~/js/validation-helpers.js"></script> @* Include helpers *@
    <script>
        // Using shared validation helpers
        document.addEventListener('DOMContentLoaded', function () {
            // Get form and submit button
            const profileForm = document.querySelector('form');
            const submitButton = profileForm ? profileForm.querySelector('button[type="submit"]') : null;

            const phoneInput = document.getElementById('DoctorProfile_ContactPhone');
            const emailInput = document.getElementById('DoctorProfile_ContactEmail');
            const phoneValidationSpan = document.querySelector('span[data-valmsg-for="DoctorProfile.ContactPhone"]');
            const emailValidationSpan = document.querySelector('span[data-valmsg-for="DoctorProfile.ContactEmail"]');
            const licenseInput = document.getElementById('DoctorProfile_LicenseNumber');
            const licenseValidationSpan = document.querySelector('span[data-valmsg-for="DoctorProfile.LicenseNumber"]');
            const nameInput = document.getElementById('DoctorProfile_Name');
            const nameValidationSpan = document.querySelector('span[data-valmsg-for="DoctorProfile.Name"]');
            
             // Function to update submit button state
            function updateSubmitButtonState() {
                if (!submitButton || !profileForm) return;
                const isValid = isFormClientSideValid(profileForm);
                submitButton.disabled = !isValid;
            }

            // Apply Input Masking for Phone Number
            if (phoneInput) {
                const phoneMask = IMask(phoneInput, {
                    mask: '+{20}1000000000', // Fixed country code + 10 digits
                    lazy: false // Show mask immediately
                });
            }

            // Define the handler that calls the shared function for phone format
            const phoneFormatHandler = () => validatePhoneNumberFormat(phoneInput, phoneValidationSpan);
            // License Handlers
            const licenseRequiredHandler = () => validateRequiredField(licenseInput, licenseValidationSpan, 'License Number');
            const licenseFormatHandler = () => validateNumericRange(licenseInput, licenseValidationSpan, 4, 19, 'License Number'); 
            // Name Handler
            const nameRequiredHandler = () => {
                 validateRequiredField(nameInput, nameValidationSpan, 'Name');
                 updateSubmitButtonState(); // Update after name check
            };

            // Define combined handlers that also update submit button
             const combinedContactHandler = () => {
                validateContactMethodRequired(phoneInput, emailInput, phoneValidationSpan, emailValidationSpan);
                updateSubmitButtonState(); 
            };
            const combinedPhoneFormatHandler = () => {
                validatePhoneNumberFormat(phoneInput, phoneValidationSpan);
                updateSubmitButtonState();
            };
            const combinedLicenseHandler = () => {
                licenseRequiredHandler(); 
                licenseFormatHandler();   
                updateSubmitButtonState();
            };

            // Add listeners to fields
            if (phoneInput) {
                 phoneInput.addEventListener('blur', combinedContactHandler); // Checks required contact
                 phoneInput.addEventListener('blur', combinedPhoneFormatHandler); // Checks format
            }
            if (emailInput) {
                emailInput.addEventListener('blur', combinedContactHandler); // Checks required contact
            }
            if (licenseInput) {
                 licenseInput.addEventListener('blur', combinedLicenseHandler);
                 licenseInput.addEventListener('input', debounce(combinedLicenseHandler, 500));
            }
            if (nameInput) {
                nameInput.addEventListener('blur', nameRequiredHandler);
                nameInput.addEventListener('input', debounce(nameRequiredHandler, 500));
            }
            
            // Initial checks on load
            combinedContactHandler();
            combinedPhoneFormatHandler(); 
            combinedLicenseHandler();
            nameRequiredHandler();
            updateSubmitButtonState(); // Final initial state check

            // Check for TempData messages and display toasts
            const successMessage = '@Html.Raw(TempData["SuccessMessage"])'; 
            const errorMessage = '@Html.Raw(TempData["ErrorMessage"])';

            if (successMessage) {
                showToast(successMessage, 'success');
            }
            if (errorMessage) {
                showToast(errorMessage, 'danger');
            }
        });
    </script>
}
