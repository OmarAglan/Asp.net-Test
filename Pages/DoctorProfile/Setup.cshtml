@page
@model Roshta.Pages.DoctorProfile.SetupModel
@{
    ViewData["Title"] = "Doctor Profile Setup";
    // Layout = null; // Optional: Use a layout without navigation for setup?
}

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header">
                    <h1 class="text-center">@ViewData["Title"]</h1>
                </div>
                <div class="card-body">
                    <p class="text-center">Welcome! Please complete your profile information.</p>
                    <form method="post">
                        <div asp-validation-summary="ModelOnly" class="text-danger mb-3"></div>
                        
                        <div class="mb-3">
                            <label asp-for="DoctorProfile.Name" class="form-label"></label>
                            <input asp-for="DoctorProfile.Name" class="form-control" />
                            <span asp-validation-for="DoctorProfile.Name" class="text-danger"></span>
                        </div>

                         <div class="mb-3">
                            <label asp-for="DoctorProfile.Specialization" class="form-label"></label>
                            <input asp-for="DoctorProfile.Specialization" class="form-control" />
                            <span asp-validation-for="DoctorProfile.Specialization" class="text-danger"></span>
                        </div>

                         <div class="mb-3">
                            <label asp-for="DoctorProfile.LicenseNumber" class="form-label"></label>
                            <input asp-for="DoctorProfile.LicenseNumber" class="form-control" />
                            <span asp-validation-for="DoctorProfile.LicenseNumber" class="text-danger"></span>
                        </div>

                         <div class="mb-3">
                            <label asp-for="DoctorProfile.ContactPhone" class="form-label"></label>
                            <input asp-for="DoctorProfile.ContactPhone" class="form-control" />
                            <span asp-validation-for="DoctorProfile.ContactPhone" class="text-danger"></span>
                        </div>

                         <div class="mb-3">
                            <label asp-for="DoctorProfile.ContactEmail" class="form-label"></label>
                            <input asp-for="DoctorProfile.ContactEmail" class="form-control" />
                            <span asp-validation-for="DoctorProfile.ContactEmail" class="text-danger"></span>
                        </div>
                        
                        <div class="d-grid">
                            <button type="submit" class="btn btn-primary">Save Profile</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        // Using shared validation helpers
        document.addEventListener('DOMContentLoaded', function () {
            const phoneInput = document.getElementById('DoctorProfile_ContactPhone');
            const emailInput = document.getElementById('DoctorProfile_ContactEmail');
            const phoneValidationSpan = document.querySelector('span[data-valmsg-for="DoctorProfile.ContactPhone"]');
            const emailValidationSpan = document.querySelector('span[data-valmsg-for="DoctorProfile.ContactEmail"]');
            const licenseInput = document.getElementById('DoctorProfile_LicenseNumber');
            const licenseValidationSpan = document.querySelector('span[data-valmsg-for="DoctorProfile.LicenseNumber"]');
            const nameInput = document.getElementById('DoctorProfile_Name');
            const nameValidationSpan = document.querySelector('span[data-valmsg-for="DoctorProfile.Name"]');
            
            // Apply Input Masking for Phone Number
            if (phoneInput) {
                const phoneMask = IMask(phoneInput, {
                    mask: '+{20}1000000000', // Fixed country code + 9 digits
                    lazy: false // Show mask immediately
                });
            }

            // Define the handler that calls the shared function for required contact
            const contactRequiredHandler = () => validateContactMethodRequired(phoneInput, emailInput, phoneValidationSpan, emailValidationSpan);
            // Define the handler that calls the shared function for phone format
            const phoneFormatHandler = () => validatePhoneNumberFormat(phoneInput, phoneValidationSpan);
            const licenseRequiredHandler = () => validateRequiredField(licenseInput, licenseValidationSpan, 'License Number');
            const nameRequiredHandler = () => validateRequiredField(nameInput, nameValidationSpan, 'Name');

            // Add listeners to both fields
            if (phoneInput) {
                phoneInput.addEventListener('blur', contactRequiredHandler);
                phoneInput.addEventListener('blur', phoneFormatHandler); // Also check format on blur
            }
            if (emailInput) {
                emailInput.addEventListener('blur', contactRequiredHandler);
            }
            if (licenseInput) {
                licenseInput.addEventListener('blur', licenseRequiredHandler);
                licenseInput.addEventListener('input', debounce(licenseRequiredHandler, 500));
            }
            if (nameInput) {
                nameInput.addEventListener('blur', nameRequiredHandler);
                nameInput.addEventListener('input', debounce(nameRequiredHandler, 500));
            }
            
            // Initial checks on load
            contactRequiredHandler(); 
            phoneFormatHandler(); 
            licenseRequiredHandler();
            nameRequiredHandler();
        });
    </script>
} 