@page
@model Roshta.Pages_Patients.CreateModel

        @{
        ViewData["Title"] = "Create";
        }
        
        <h1>Create</h1>
        
    <h4>Patient</h4>
    <hr />
    <div class="row">
    <div class="col-md-4">
    <form method="post">
    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <span class="text-danger">*</span>
                <label asp-for="Patient.Name" class="control-label"></label>
                <input asp-for="Patient.Name" class="form-control" id="Patient_Name"/>
                <span asp-validation-for="Patient.Name" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Patient.DateOfBirth" class="control-label"></label>
                <input asp-for="Patient.DateOfBirth" class="form-control" />
                <span asp-validation-for="Patient.DateOfBirth" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Patient.ContactInfo" class="control-label"></label>
                <input asp-for="Patient.ContactInfo" class="form-control" id="Patient_ContactInfo"/>
                <span asp-validation-for="Patient.ContactInfo" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Patient.VisitCount" class="control-label"></label>
                <input asp-for="Patient.VisitCount" class="form-control" />
                <span asp-validation-for="Patient.VisitCount" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Patient.LastVisitDate" class="control-label"></label>
                <input asp-for="Patient.LastVisitDate" class="form-control" />
                <span asp-validation-for="Patient.LastVisitDate" class="text-danger"></span>
            </div>
            <div class="form-group form-check">
                <label class="form-check-label">
                    <input class="form-check-input" asp-for="Patient.HasOutstandingBalance" /> @Html.DisplayNameFor(model => model.Patient.HasOutstandingBalance)
                </label>
            </div>
            <div class="form-group form-check">
                <label class="form-check-label">
                    <input class="form-check-input" asp-for="Patient.IsActive" /> @Html.DisplayNameFor(model => model.Patient.IsActive)
                </label>
            </div>
            <div class="form-group">
                <label asp-for="Patient.CreatedAt" class="control-label"></label>
                <input asp-for="Patient.CreatedAt" class="form-control" />
                <span asp-validation-for="Patient.CreatedAt" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Patient.UpdatedAt" class="control-label"></label>
                <input asp-for="Patient.UpdatedAt" class="form-control" />
                <span asp-validation-for="Patient.UpdatedAt" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-page="Index">Back to List</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script src="~/js/validation-helpers.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Get form and submit button
            const patientForm = document.querySelector('form'); // Assuming one form on the page
            const submitButton = patientForm ? patientForm.querySelector('button[type="submit"]') : null;

            // Get input elements and validation spans
            const nameInput = document.getElementById('Patient_Name');
            const dobInput = document.getElementById('Patient_DateOfBirth');
            const lastVisitInput = document.getElementById('Patient_LastVisitDate');
            const dobValidationSpan = document.querySelector('span[data-valmsg-for="Patient.DateOfBirth"]');
            const lastVisitValidationSpan = document.querySelector('span[data-valmsg-for="Patient.LastVisitDate"]');
            const contactInput = document.getElementById('Patient_ContactInfo');
            const nameValidationSpan = document.querySelector('span[data-valmsg-for="Patient.Name"]');
            const contactValidationSpan = document.querySelector('span[data-valmsg-for="Patient.ContactInfo"]');

            // Removed local validateDob and validateLastVisit functions

            if (dobInput) {
                const prefix = dobInput.labels[0]?.textContent || 'Date of Birth'; // Get label text
                dobInput.addEventListener('change', () => validateDateIsPast(dobInput, dobValidationSpan, prefix));
                dobInput.addEventListener('blur', () => validateDateIsPast(dobInput, dobValidationSpan, prefix));
            }
            if (lastVisitInput) {
                const prefix = lastVisitInput.labels[0]?.textContent || 'Last Visit Date';
                // Last Visit Date uses validateDateIsPast but checks if date > today
                // Let's create a specific helper or adjust validateDateIsPast if needed.
                // For now, using a lambda to adapt logic slightly: check it's NOT future
                const validateLastVisitNotFuture = (input, span, msgPrefix) => {
                    if (!input || !span) return;
                    const dateValue = input.value;
                    span.textContent = '';
                    input.classList.remove('is-invalid');
                    if (dateValue) {
                        try {
                            const today = new Date();
                            today.setUTCHours(0, 0, 0, 0);
                            const parts = dateValue.split('-');
                            const inputDate = new Date(Date.UTC(parts[0], parts[1] - 1, parts[2]));
                            if (inputDate > today) { // Check if it IS in the future
                                span.textContent = msgPrefix + ' cannot be in the future.';
                                input.classList.add('is-invalid');
                            }
                        } catch (e) {
                             span.textContent = 'Invalid date format.';
                             input.classList.add('is-invalid');
                        }
                    }
                };
                lastVisitInput.addEventListener('change', () => validateLastVisitNotFuture(lastVisitInput, lastVisitValidationSpan, prefix));
                lastVisitInput.addEventListener('blur', () => validateLastVisitNotFuture(lastVisitInput, lastVisitValidationSpan, prefix));
            }

            // Function to update submit button state
            function updateSubmitButtonState() {
                if (!submitButton || !patientForm) return;
                const isValid = isFormClientSideValid(patientForm);
                submitButton.disabled = !isValid;
            }

            // Validation handlers
            const nameRequiredHandler = () => {
                validateRequiredField(nameInput, nameValidationSpan, 'Name');
                updateSubmitButtonState(); // Update button state after validation
            };
            const contactRequiredHandler = () => {
                validateRequiredField(contactInput, contactValidationSpan, 'Contact Info');
                // Don't update button state here directly, combined handler will do it
            };
            const contactFormatHandler = () => {
                validateBasicContactFormat(contactInput, contactValidationSpan);
                // Don't update button state here directly, combined handler will do it
            };

            // Add listeners
            if (nameInput) {
                nameInput.addEventListener('blur', nameRequiredHandler);
                nameInput.addEventListener('input', debounce(nameRequiredHandler, 500));
            }
            if (contactInput) {
                const combinedContactHandler = () => {
                    contactRequiredHandler();
                    contactFormatHandler();
                    updateSubmitButtonState(); // Update button state after combined validation
                };
                contactInput.addEventListener('blur', combinedContactHandler);
                contactInput.addEventListener('input', debounce(combinedContactHandler, 500));
            }

            // Initial checks on load
            nameRequiredHandler();
            contactRequiredHandler();
            contactFormatHandler();
            updateSubmitButtonState(); // Set initial button state

            // --- Add call for Contact Info uniqueness check (Create) ---
            setupPatientContactInfoUniquenessCheck('/Patients/Create');
            // ---------------------------------------------------------

            // --- Add call for Name uniqueness check (Create) ---
            setupPatientNameUniquenessCheck('/Patients/Create');
            // ---------------------------------------------------
        });
    </script>
}
