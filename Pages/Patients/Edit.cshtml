@page
@model Roshta.Pages_Patients.EditModel

@{
    ViewData["Title"] = "Edit";
}

<h1>Edit</h1>

<h4>Patient</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form method="post">
            <div asp-validation-summary="ModelOnly" class="text-danger mb-3"></div> @* Added mb-3 *@
            <input type="hidden" asp-for="Patient.Id" />
            <div class="mb-3"> @* Replaced form-group with mb-3 *@
                <label asp-for="Patient.Name" class="form-label"><span class="text-danger">*</span> @Html.DisplayNameFor(m => m.Patient.Name)</label> @* Added form-label, moved asterisk *@
                <input asp-for="Patient.Name" class="form-control" id="Patient_Name" />
                <span asp-validation-for="Patient.Name" class="text-danger d-block"></span> @* Added d-block *@
            </div>
            <div class="mb-3"> @* Replaced form-group with mb-3 *@
                <label asp-for="Patient.DateOfBirth" class="form-label"></label> @* Added form-label *@
                <input asp-for="Patient.DateOfBirth" class="form-control" />
                <span asp-validation-for="Patient.DateOfBirth" class="text-danger d-block"></span> @* Added d-block *@
            </div>
            <div class="mb-3"> @* Replaced form-group with mb-3 *@
                <label asp-for="Patient.ContactInfo" class="form-label"></label> @* Added form-label *@
                <input asp-for="Patient.ContactInfo" class="form-control" id="Patient_ContactInfo" />
                <span asp-validation-for="Patient.ContactInfo" class="text-danger d-block"></span> @* Added d-block *@
            </div>
            <div class="mb-3"> @* Replaced form-group with mb-3 *@
                <label asp-for="Patient.VisitCount" class="form-label"></label> @* Added form-label *@
                <input asp-for="Patient.VisitCount" class="form-control" />
                <span asp-validation-for="Patient.VisitCount" class="text-danger d-block"></span> @* Added d-block *@
            </div>
            <div class="mb-3"> @* Replaced form-group with mb-3 *@
                <label asp-for="Patient.LastVisitDate" class="form-label"></label> @* Added form-label *@
                <input asp-for="Patient.LastVisitDate" class="form-control" />
                <span asp-validation-for="Patient.LastVisitDate" class="text-danger d-block"></span> @* Added d-block *@
            </div>
            <div class="mb-3 form-check"> @* Replaced form-group with mb-3 *@
                <input class="form-check-input" asp-for="Patient.HasOutstandingBalance" /> 
                <label class="form-check-label" asp-for="Patient.HasOutstandingBalance"></label> @* Use asp-for *@
            </div>
            <div class="mb-3 form-check"> @* Replaced form-group with mb-3 *@
                <input class="form-check-input" asp-for="Patient.IsActive" /> 
                <label class="form-check-label" asp-for="Patient.IsActive"></label> @* Use asp-for *@
            </div>
            <div class="mb-3"> @* Replaced form-group with mb-3 *@
                <label asp-for="Patient.CreatedAt" class="form-label"></label> @* Added form-label *@
                <input asp-for="Patient.CreatedAt" class="form-control" readonly /> @* Made readonly *@
                <span asp-validation-for="Patient.CreatedAt" class="text-danger d-block"></span> @* Added d-block *@
            </div>
            <div class="mb-3"> @* Replaced form-group with mb-3 *@
                <label asp-for="Patient.UpdatedAt" class="form-label"></label> @* Added form-label *@
                <input asp-for="Patient.UpdatedAt" class="form-control" readonly /> @* Made readonly *@
                <span asp-validation-for="Patient.UpdatedAt" class="text-danger d-block"></span> @* Added d-block *@
            </div>
            <div class="mt-4"> @* Replaced form-group with mt-4 for button spacing *@
                <input type="submit" value="Save" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div class="mt-3"> @* Added margin top for spacing *@
    <a asp-page="./Index" class="btn btn-outline-secondary">Back to List</a> @* Added btn classes *@
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script src="~/js/validation-helpers.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Get form and submit button
            const patientForm = document.querySelector('form'); 
            const submitButton = patientForm ? patientForm.querySelector('button[type="submit"]') : null;

            const dobInput = document.getElementById('Patient_DateOfBirth');
            const dobValidationSpan = document.querySelector('span[data-valmsg-for="Patient.DateOfBirth"]');
            const lastVisitInput = document.getElementById('Patient_LastVisitDate');
            const lastVisitValidationSpan = document.querySelector('span[data-valmsg-for="Patient.LastVisitDate"]');

            // Function to update submit button state
            function updateSubmitButtonState() {
                if (!submitButton || !patientForm) return;
                const isValid = isFormClientSideValid(patientForm);
                submitButton.disabled = !isValid;
            }

            // Individual date validation handlers (ensure not in future)
            const validateDobNotFuture = () => validateDateNotFuture(dobInput, dobValidationSpan, 'Date of Birth');
            const validateLastVisitNotFutureHandler = () => validateLastVisitNotFuture(lastVisitInput, lastVisitValidationSpan, 'Last Visit Date');

            // Cross-field validation handler (LastVisit > DOB)
            const dobVsLastVisitHandler = () => {
                validateDateBAfterDateA(
                    dobInput,               // Date A
                    lastVisitInput,         // Date B
                    dobValidationSpan,      // Span A
                    lastVisitValidationSpan,// Span B
                    'Date of Birth',        // Name A
                    'Last Visit Date'       // Name B
                );
                // Update button state after cross-field check too
                updateSubmitButtonState(); 
            };

            // Combined handlers for attaching to events
            const combinedDobHandler = () => {
                validateDobNotFuture();
                dobVsLastVisitHandler(); // This now calls updateSubmitButtonState
            };
            const combinedLastVisitHandler = () => {
                validateLastVisitNotFutureHandler();
                dobVsLastVisitHandler(); // This now calls updateSubmitButtonState
            };


            if (dobInput) {
                dobInput.addEventListener('blur', combinedDobHandler);
                dobInput.addEventListener('change', combinedDobHandler); 
            }
            if (lastVisitInput) {
                lastVisitInput.addEventListener('blur', combinedLastVisitHandler);
                 lastVisitInput.addEventListener('change', combinedLastVisitHandler);
            }

            // --- Name and Contact Info Validation (Existing) ---
            const nameInput = document.getElementById('Patient_Name');
            const contactInput = document.getElementById('Patient_ContactInfo');
            const nameValidationSpan = document.querySelector('span[data-valmsg-for="Patient.Name"]');
            const contactValidationSpan = document.querySelector('span[data-valmsg-for="Patient.ContactInfo"]');

            // Validation handlers
            const nameRequiredHandler = () => {
                 validateRequiredField(nameInput, nameValidationSpan, 'Name');
                 updateSubmitButtonState();
            };
            const contactRequiredHandler = () => {
                 validateRequiredField(contactInput, contactValidationSpan, 'Contact Info');
                 // No button update here, combined handler does it
            };
            const contactFormatHandler = () => {
                 validateBasicContactFormat(contactInput, contactValidationSpan);
                 // No button update here, combined handler does it
            };

            // Add listeners
            if (nameInput) {
                nameInput.addEventListener('blur', nameRequiredHandler);
                nameInput.addEventListener('input', debounce(nameRequiredHandler, 500));
            }
            if (contactInput) {
                const combinedContactHandler = () => {
                    contactRequiredHandler(); 
                    contactFormatHandler();   
                    updateSubmitButtonState(); // Update button state after combined validation
                };
                contactInput.addEventListener('blur', combinedContactHandler);
                contactInput.addEventListener('input', debounce(combinedContactHandler, 500));
            }

            // Initial checks on load
            combinedDobHandler(); 
            combinedLastVisitHandler(); 
            nameRequiredHandler();
            contactRequiredHandler(); 
            contactFormatHandler();   
            updateSubmitButtonState(); // Set initial button state

            // --- Add call for Contact Info uniqueness check (Edit) ---
            // Pass the current patient ID to exclude it from the check
            setupPatientContactInfoUniquenessCheck('/Patients/Edit', @Model.Patient.Id);
            // -------------------------------------------------------

             // --- Add call for Name uniqueness check (Edit) ---
            setupPatientNameUniquenessCheck('/Patients/Edit', @Model.Patient.Id);
            // ------------------------------------------------
        });
    </script>
}
